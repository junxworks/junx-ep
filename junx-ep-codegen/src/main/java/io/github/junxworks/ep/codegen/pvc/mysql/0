DROP TABLE IF EXISTS ep_cg_datasource;
CREATE TABLE `ep_cg_datasource` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_user` bigint(20) DEFAULT NULL COMMENT '创建人员',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_user` bigint(20) DEFAULT NULL COMMENT '修改人员',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  `ds_id` varchar(100) NOT NULL COMMENT '数据源标识',
  `ds_desc` varchar(100) DEFAULT NULL COMMENT '数据源描述',
  `db_type` varchar(50) NOT NULL COMMENT '数据库类型',
  `conn_url` varchar(200) NOT NULL COMMENT '连接地址',
  `db_name` varchar(50) DEFAULT NULL COMMENT '数据库实例名',
  `db_username` varchar(50) NOT NULL COMMENT '数据库账号',
  `db_passwd` varchar(200) NOT NULL COMMENT '数据库密码',
  `status` tinyint(4) DEFAULT NULL COMMENT '0正常 -1删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='EP代码生成数据源配置';

DROP TABLE IF EXISTS ep_cg_template;
CREATE TABLE `ep_cg_template` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_user` bigint(20) DEFAULT NULL COMMENT '创建人员',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_user` bigint(20) DEFAULT NULL COMMENT '修改人员',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  `tmp_id` varchar(100) NOT NULL COMMENT '模板标识',
  `tmp_desc` varchar(100) DEFAULT NULL COMMENT '模板描述',
  `output_name` varchar(100) NOT NULL COMMENT '输出文件名称',
  `content` text NOT NULL COMMENT '模板内容',
  `status` tinyint(4) DEFAULT NULL COMMENT '0正常 -1删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='EP代码生成模板配置';

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (1,-1,'2021-11-09 23:14:20','ep_java_entity','EP框架Entity实体java类生成','{table.className}.java','package xxx;

import io.github.junxworks.ep.core.orm.annotations.Table;
import io.github.junxworks.ep.core.orm.annotations.PrimaryKey;
import io.github.junxworks.ep.core.orm.annotations.Column;

<#if (table.hasDateColumn)>
import java.util.Date;
</#if>

<#if (table.hasBigDecimalColumn)>
import java.math.BigDecimal;
</#if>

/**
 * Table ${table.tableName} Entity Class
 *
 * @since ${.now} Generated by JunxEP
 */
@Table(tableName="${table.tableName}",tableComment="${table.tableComment!}")
public class ${table.className} {
<#list table.primaryKeys as column>

    @PrimaryKey
    @Column(name="${column.columnName}", type="${column.jdbcTypeName}", length="${column.size}", nullable="${column.nullable?c}", comment="${column.remarks!}")
    private ${column.javaType} ${column.javaProperty};
</#list>
<#list table.baseColumns as column>

    @Column(name="${column.columnName}", type="${column.jdbcTypeName}", length="${column.size}", nullable="${column.nullable?c}", comment="${column.remarks!}")
    private ${column.javaType} ${column.javaProperty};	
</#list>
<#list table.primaryKeys as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
<#list table.baseColumns as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (2,-1,'2021-11-12 13:11:16','ep_java_entity_dto','EP框架实体dto的java类生成','{table.className}Dto.java','package xxx;

<#if (table.hasDateColumn)>
import java.util.Date;
</#if>

<#if (table.hasBigDecimalColumn)>
import java.math.BigDecimal;
</#if>

/**
 * ${table.tableName} Entity DTO Class
 *
 * @since ${.now} Generated by JunxEP
 */
public class ${table.className}Dto {
<#list table.primaryKeys as column>

    /**${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};
</#list>
<#list table.baseColumns as column>

    /**${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};	
</#list>
<#list table.primaryKeys as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
<#list table.baseColumns as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }
    
    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (3,-1,'2021-11-12 13:19:42','ep_java_entity_condition','EP框架查询条件java对象','{table.className}Condition.java','package xxx;

<#if (table.hasDateColumn)>
import java.util.Date;
</#if>
<#if (table.hasBigDecimalColumn)>
import java.math.BigDecimal;
</#if>
import io.github.junxworks.ep.core.Pageable;

/**
 * Condition Class
 *
 * @since ${.now} Generated by JunxEP
 */
public class ${table.className}Condition  extends Pageable{
<#list table.primaryKeys as column>

    /**${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};
</#list>
<#list table.baseColumns as column>

    /** ${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};	
</#list>
<#list table.primaryKeys as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
<#list table.baseColumns as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (4,-1,'2021-11-12 14:11:21','ep_java_controller','EP框架生成controller的java代码','{table.className}Controller.java','package xxx;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.github.pagehelper.PageInfo;
import io.github.junxworks.ep.core.Result;
import io.github.junxworks.ep.core.utils.PageUtils;
import io.github.junxworks.ep.sys.annotations.EpLog;
import io.github.junxworks.ep.sys.constants.RecordStatus;
/**
 * ${table.tableName} Entity Controller Class
 *
 * @since ${.now} Generated by JunxEP
 */
@RestController
@RequestMapping("/xx/xx")
public class ${table.className}Controller {
	@Autowired
	private ${table.className}Service ${table.javaFieldName}Service;

	/**
	 * Query list.
	 *
	 * @param condition the condition
	 * @return the result
	 */
	@GetMapping()
	public Result query${table.className}List(${table.className}Condition condition) {
		//查询列表数据
		PageUtils.setPage(condition);
		return Result.ok(new PageInfo<>(${table.javaFieldName}Service.queryList(condition)));
	}

	/**
	 * Save .
	 *
	 * @param dto the dto
	 * @return the result
	 */
	@EpLog("XX-XX-保存XX")
	@PostMapping()
	public Result save${table.className}(@RequestBody ${table.className}Dto dto) {
		${table.javaFieldName}Service.save(dto);
		return Result.ok();
	}

	/**
	 * Query entity by id.
	 *
	 * @param id the id
	 * @return the result
	 */
	@GetMapping("/{id}")
	public Result query${table.className}EntityById(@PathVariable("id") Long id) {
		return Result.ok(${table.javaFieldName}Service.query${table.className}ById(id));
	}

	/**
	 * Delete.
	 *
	 * @param id the id
	 * @return the result
	 */
	@EpLog("XX-XX-删除XX")
	@DeleteMapping("/{id}")
	public Result delete${table.className}(@PathVariable("id") Long id) {
		${table.className}Dto dto = new ${table.className}Dto();
		dto.setId(id);
		dto.setStatus(RecordStatus.DELETED.getValue());
		${table.javaFieldName}Service.save(dto);
		return Result.ok();
	}
}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (5,-1,'2021-11-12 14:29:55','ep_java_service','EP框架service接口java代码生成','{table.className}Service.java','package xxx;

import java.util.List;

public interface ${table.className}Service {

	List<${table.className}Vo> queryList(${table.className}Condition condition);

	${table.className}Vo query${table.className}ById(Long id);

	void save(${table.className}Dto dto);
}

',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (6,-1,'2021-11-12 14:35:41','ep_java_service_impl','EP框架生成service接口的实现java类','{table.className}ServiceImpl.java','package xxx;

import java.util.Date;
import java.util.List;

import org.apache.shiro.SecurityUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import io.github.junxworks.ep.auth.model.UserModel;
import io.github.junxworks.ep.sys.constants.RecordStatus;

@Service
public class ${table.className}ServiceImpl implements ${table.className}Service {

	@Autowired
	private ${table.className}Mapper ${table.javaFieldName}Mapper;

	@Override
	public List<${table.className}Vo> queryList(${table.className}Condition condition) {
		return ${table.javaFieldName}Mapper.queryList(condition);
	}

	@Override
	public ${table.className}Vo query${table.className}ById(Long id) {
		return ${table.javaFieldName}Mapper.query${table.className}ById(id);
	}

	@Override
	public void save(${table.className}Dto dto) {
		${table.className} entity = new ${table.className}();
		BeanUtils.copyProperties(dto, entity);
		UserModel user = (UserModel) SecurityUtils.getSubject().getPrincipal();
		Long userId = user.getId();
		if (entity.getId() == null) {
			entity.setCreateTime(new Date());
			entity.setCreateUser(userId);
			entity.setStatus(RecordStatus.NORMAL.getValue());
			${table.javaFieldName}Mapper.insertWithoutNull(entity);
		} else {
			entity.setUpdateTime(new Date());
			entity.setUpdateUser(userId);
			${table.javaFieldName}Mapper.updateWithoutNull(entity);
		}
	}
}
',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (7,-1,'2021-11-12 14:48:12','ep_java_mapper','EP框架mybatis的mapper接口java类生成','{table.className}Mapper.java','package xxx;

import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import io.github.junxworks.ep.core.orm.TBaseMapper;

@Mapper
public interface ${table.className}Mapper extends TBaseMapper<${table.className}> {

	List<${table.className}Vo> queryList(${table.className}Condition condition);
	
	@Select("select * from ${table.tableName} where id=<#noparse>#{id}</#noparse>")
	${table.className}Vo query${table.className}ById(@Param("id") Long id);

}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (8,-1,'2021-11-12 14:49:18','ep_java_entity_vo','EP框架实体Vo对象java类生成','{table.className}Vo.java','package xxx;

<#if (table.hasDateColumn)>
import java.util.Date;
</#if>
<#if (table.hasBigDecimalColumn)>
import java.math.BigDecimal;
</#if>

/**
 * ${table.tableName} Entity VO Class
 *
 * @since ${.now} Generated by JunxEP
 */
public class ${table.className}Vo {
<#list table.primaryKeys as column>

    /**${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};
</#list>
<#list table.baseColumns as column>

    /**${column.remarks!}*/
    private ${column.javaType} ${column.javaProperty};	
</#list>
<#list table.primaryKeys as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }

    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>
<#list table.baseColumns as column>

    public ${column.javaType} ${column.getterMethodCamelName}(){
        return this.${column.javaProperty};
    }
    
    public void ${column.setterMethodCamelName}(${column.javaType} ${column.javaProperty}){
        this.${column.javaProperty} = ${column.javaProperty};
    }
</#list>

}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (9,-1,'2021-11-12 14:50:28','ep_java_mapper_xml','EP框架mybatis的xml文件生成','{table.className}Mapper.xml','<#noparse><?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="【请修改】Mapper">
	<select id="queryList" resultType="【请修改】Vo">
	    SELECT t.*
	    FROM xxxx t
		<where>
		   <if test=''xx!=null and xx!=""''>
				 and t.xxx like concat(''%'',#{xx},''%'')
		   </if>
		   <if test=''xx!=null and xx!=""''>
				 and t.xxx  <![CDATA[<]]> #{xx}
		   </if>
		   <if test="ids!= null and ids.size()>0">
				 and t.id in
				 <foreach collection="ids" item="id" open="(" close=")" separator=",">
					  #{id}
				 </foreach>
			</if>
		</where>
	</select>
</mapper>
</#noparse>',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (10,-1,'2021-11-12 15:09:06','ep_f_html_list','EP框架前端html文件代码生成','list.html','<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" custReport="width=device-width, initial-scale=1.0">
    <meta name="renderer" custReport="webkit">
    <meta http-equiv="X-UA-Compatible" custReport="ie=edge">
    <link href="../../../eui/plugins/layui/css/layui.css" rel="stylesheet" media="all"/>
    <link href="../../../eui/css/components.min.css" rel="stylesheet" media="all"/>
    <link href="../../../eui/plugins/font-awesome/css/font-awesome.min.css" rel="stylesheet" media="all"/>
</head>

<body>
<script src="../../../eui/js/base.js"></script>
<script src="../../../eui/plugins/layui/layui.js"></script>
<script src="../../../eui/plugins/jquery.min.js"></script>
<script src="list.js"></script>

<div class="portlet light" id="form_wizard_1">
    <div class="portlet-title">
        <div class="caption">
            <span class="caption-subject font-green sbold uppercase">xxxxxx菜单名</span>
        </div>
    </div>
    <div class="div-inline" style="clear:both">
          <form class="layui-form">
		   <div class="layui-form-item">
                <div class="layui-inline">
		        	<label class="layui-form-label" style="width:100px">输入框：</label>
					<div class="layui-input-inline">
						  <input name="xxxx" type="text" class="layui-input">
					</div>
		        </div>
                <div class="layui-inline">
		        	<label class="layui-form-label" style="width:100px">下拉框：</label>
					<div class="layui-input-inline">
						  <select id="selectId" name="xxx" lay-filter="xxx"></select>
					</div>
		        </div>
                <div class="layui-inline">
		        	<label class="layui-form-label" style="width:100px">日期选择：</label>
					<div class="layui-input-inline">
						  <input id="startDate" type="text" name="xxx"  autocomplete="off"  class="layui-input">
					</div>
		        </div>
		        <div class="layui-inline">
		            <div class="layui-input-inline" >
		                <button type="button" class="layui-btn" lay-submit="" lay-filter="search"><i class="fa fa-search"></i> 查询</button>
		            	<button type="button" class="layui-btn layui-btn-normal" onclick="edit()"><i class="fa fa-plus-square"></i> 新增</button>
		            </div>
		        </div>
		    </div>
		</form>
    </div>
    <div class="portlet-body">
        <div class="dataTables_wrapper" style="margin-top: 0px!important" >
			<table id="lTable" class="layui-table"> </table>
        </div>
    </div>
</div>

<script type="text/html" id="operateTp">
	{{#  if(checkAuth(''xxx:xxx:edit'')){ }}
		<button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="edit({{d.id}})">
			<i class="fa fa-edit"></i>修改
		</button>
	{{#  } }}
    <button type="button" class="layui-btn layui-btn-sm layui-btn-danger" onclick="del({{d.id}})">
        <i class="fa fa-trash"></i>删除
    </button>
</script>
</body>
</html>',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (11,-1,'2021-11-12 15:16:29','ep_f_html_edit','EP框架前端代码编辑页面','edit.html','<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" custReport="width=device-width, initial-scale=1.0">
    <meta name="renderer" custReport="webkit">
    <meta http-equiv="X-UA-Compatible" custReport="ie=edge">
    <link href="../../../eui/plugins/layui/css/layui.css" rel="stylesheet" media="all"/>
    <link href="../../../eui/css/components.min.css" rel="stylesheet" media="all"/>
    <link href="../../../eui/plugins/font-awesome/css/font-awesome.min.css" rel="stylesheet" media="all"/>
</head>

<body>
	<script src="../../../eui/js/base.js"></script>
	<script src="../../../eui/plugins/layui/layui.js"></script>
	<script src="../../../eui/plugins/jquery.min.js"></script>
	<script src="edit.js"></script>

    <form id="lForm" class="layui-form layui-form-pane" lay-filter="lForm" style="padding-top: 10px;padding-left: 10px">
        <input type="hidden"  name="id" value="">
        <div class="layui-form-item">
			<div class="layui-inline">
				<label class=" layui-form-label" style="width:120px;" >输入框</label>
				<div class="layui-input-inline" >
					<input type="text" lay-verify="required" placeholder=""  name="xxx"  autocomplete="off"  class="layui-input">
				</div>
			</div>
         </div>
		<div class="layui-form-item">
			 <div class="layui-inline">
				<label class=" layui-form-label" style="width:120px;" >下拉框</label>
				<div class="layui-input-inline">
					<select id="selectId" name="xxx" lay-filter="xxx" lay-verify="required"></select>
				</div>
			</div>
		</div>
		<div class="layui-form-item">
			  <label class="layui-form-label" style="width:120px">文本域</label>
			  <div class="layui-input-block">
					<textarea type="text" name="xxx"  autocomplete="off"  class="layui-input" style="width:300px; height: 150px"></textarea>
			  </div>
		</div>
	    <div class="layui-form-item" style="padding-top: 20px;text-align: center">
			<div>
				<button type="button" class="layui-btn layui-btn-primary" onclick="closePage()">取消</button>
				<button class="layui-btn" lay-submit lay-filter="save">保存</button>
			</div>
		</div>
    </form>
</body>
</html>',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (12,-1,'2021-11-12 15:38:26','ep_f_js_list','EP框架l列表查询JS文件','list.js','var tableIns;//表格实例
layui.config({
    base: ''../../../eui/plugins/layui-extend/'' //这是你存放拓展模块的根目录
});
layui.use([''table'',''form'',''laydate''], function () {
	var laydate = layui.laydate;
    var table = layui.table;
    var form = layui.form;
	laydate.render({ 
    	elem: ''#startDate''
		,type: ''date''
    });
    dict2Select("orgType","selectId"); //数据字典赋值下拉框，具体看base.js中dict2Select方法
    form.render();
    tableIns = table.render({
          elem: ''#lTable''
        , url: appendCtx(''/列表请求url地址'')
        , cols: [[ //表头
            {field: ''字段名'', title: ''普通标题'',align:''center'',width:300},
            {field: '''', title: ''模板渲染'',align:''left'',width:400, templet: 
                   function(d){
				 return translate("orgType",d.orgType);  //数据字典翻译，具体看base.js中translate方法
	      }},
            {field: ''operate'', title: ''操作'',width:200, fixed: ''right'',templet: ''#operateTp''}
        ]]
        , page: true
        , request: {
            pageName: ''pageNo'' //页码的参数名称，默认：page
            , limitName: ''pageSize'' //每页数据量的参数名，默认：limit
        }
        , parseData: function (res) { //res 即为原始返回的数据
            return {
                "code": res.code, //解析接口状态
                "msg": res.msg, //解析提示文本
                "count": res.data.total, //解析数据长度
                "data": res.data.list //解析数据列表
            };
        }
    });

    form.on(''submit(search)'', function(formData){
    	tableIns.reload({
            where:formData.field,
			page:{
                curr: 1
            }
        });
        return false;
      });
    
});

function refreshTableData() {
    tableIns.reload({});
}

function edit(id) {
    layer.open({
        type: 2,
        title: typeof(id) != "undefined" ? ''修改'' : ''新增'',
        shadeClose: true,
        area: [''800px'', ''600px''],
        content: ''edit.html?id='' + id,
    });
}

function del(id){
	io.delete("/xxxx/"+id,function(res){
		refreshTableData();
	});
}',0);

insert into `ep_cg_template`(`id`,`create_user`,`create_time`,`tmp_id`,`tmp_desc`,`output_name`,`content`,`status`) values (13,-1,'2021-11-12 15:40:17','ep_f_js_edit','EP框架编辑页面js代码','edit.js','layui.config({
    base: ''../../../eui/plugins/layui-extend/'' //这是你存放拓展模块的根目录
});

layui.use([''form''], function () {
    var form = layui.form;
    var id = getParam("id");
    dict2Select("orgType","selectId"); //数据字典赋值下拉框，具体看base.js中dict2Select方法
    form.render();
    if(!isNull(id)){
    	io.get(''/实体查询url/'' + id,function(res){
    		var data = res.data;
            var form = layui.form;
            //表单初始赋值
            form.val(''lForm'', data)
            form.render();
    	});
    }

    //监听提交
    form.on(''submit(save)'', function (form) {
        var data=form.field;
		io.post(''/实体保存URL'',JSON.stringify(data),function(res){
	               setTimeout(function(){return closePage();},1000);
	               window.parent.refreshTableData();
		});
		return false;
    });
});',0);

DROP TABLE IF EXISTS ep_cg_generator;
CREATE TABLE `ep_cg_generator` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_user` bigint(20) DEFAULT NULL COMMENT '创建人员',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_user` bigint(20) DEFAULT NULL COMMENT '修改人员',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  `gen_name` varchar(100) NOT NULL COMMENT '生成器名称',
  `gen_desc` varchar(200) DEFAULT NULL COMMENT '生成器描述',
  `templates` varchar(1000) NOT NULL COMMENT '关联模板',
  `status` tinyint(4) DEFAULT NULL COMMENT '0正常 -1删除',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='EP代码生成器配置';

insert into `ep_cg_generator`(`create_user`,`create_time`,`gen_name`,`gen_desc`,`templates`,`status`) values (-1,'2021-11-09 23:34:08','EP默认全域代码生成器','生成Entity、dto、vo、controller、service、mapper、html、js等代码','ep_f_html_edit,ep_f_html_list,ep_f_js_edit,ep_f_js_list,ep_java_controller,ep_java_entity,ep_java_entity_condition,ep_java_entity_dto,ep_java_entity_vo,ep_java_mapper,ep_java_mapper_xml,ep_java_service,ep_java_service_impl',0);
insert into `ep_cg_generator`(`create_user`,`create_time`,`gen_name`,`gen_desc`,`templates`,`status`) values (-1,'2021-11-13 16:24:57','EP默认POJO对象生成器','生成Java实体类、condition、VO、DTO对象','ep_java_entity,ep_java_entity_condition,ep_java_entity_dto,ep_java_entity_vo',0);
insert into `ep_cg_generator`(`create_user`,`create_time`,`gen_name`,`gen_desc`,`templates`,`status`) values (-1,'2021-11-13 16:29:29','EP默认前端代码生成器','生成html、js代码','ep_f_html_edit,ep_f_html_list,ep_f_js_edit,ep_f_js_list',0);

delete from ep_s_menu where name='EP代码生成' and type=2 and status=0;
delete from ep_s_menu where name='数据源管理' and status=0 and parent_id=(select id from (select id from ep_s_menu p where p.name='EP代码生成' and type=2 and status=0) a);
delete from ep_s_menu where name='模板管理' and status=0 and parent_id=(select id from (select id from ep_s_menu p where p.name='EP代码生成' and type=2 and status=0) a);
delete from ep_s_menu where name='生成器管理' and status=0 and parent_id=(select id from (select id from ep_s_menu p where p.name='EP代码生成' and type=2 and status=0) a);

insert into `ep_s_menu`(`parent_id`,`name`,`type`,`url`,`icon`,`sort`,`status`,`create_user`,`create_time`) values (0,'EP代码生成',2,'','fa fa-rocket',100,0,-1,'2021-10-31 23:04:21');
insert into `ep_s_menu`(`parent_id`,`name`,`type`,`url`,`icon`,`sort`,`status`,`create_user`,`create_time`) select s.id,'数据源管理',0,'/eui/pages/codegen/datasource/list.html','fa fa-database',0,0,-1,'2021-10-31 23:04:21' from ep_s_menu s where s.name='EP代码生成' and s.type=2 and s.status=0;
insert into `ep_s_menu`(`parent_id`,`name`,`type`,`url`,`icon`,`sort`,`status`,`create_user`,`create_time`) select s.id,'模板管理',0,'/eui/pages/codegen/template/list.html','fa fa-clone',1,0,-1,'2021-10-31 23:04:21' from ep_s_menu s where s.name='EP代码生成' and s.type=2 and s.status=0;
insert into `ep_s_menu`(`parent_id`,`name`,`type`,`url`,`icon`,`sort`,`status`,`create_user`,`create_time`) select s.id,'生成器管理',0,'/eui/pages/codegen/generator/list.html','fa fa-hotel',1,0,-1,'2021-10-31 23:04:21' from ep_s_menu s where s.name='EP代码生成' and s.type=2 and s.status=0;